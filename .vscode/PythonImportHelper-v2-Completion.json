[
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "add_pagination",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "paginate",
        "importPath": "fastapi_pagination.ext.sqlalchemy",
        "description": "fastapi_pagination.ext.sqlalchemy",
        "isExtraImport": true,
        "detail": "fastapi_pagination.ext.sqlalchemy",
        "documentation": {}
    },
    {
        "label": "paginate",
        "importPath": "fastapi_pagination.ext.sqlalchemy",
        "description": "fastapi_pagination.ext.sqlalchemy",
        "isExtraImport": true,
        "detail": "fastapi_pagination.ext.sqlalchemy",
        "documentation": {}
    },
    {
        "label": "paginate",
        "importPath": "fastapi_pagination.ext.sqlalchemy",
        "description": "fastapi_pagination.ext.sqlalchemy",
        "isExtraImport": true,
        "detail": "fastapi_pagination.ext.sqlalchemy",
        "documentation": {}
    },
    {
        "label": "upload_file",
        "importPath": "src.utils.FileOperator",
        "description": "src.utils.FileOperator",
        "isExtraImport": true,
        "detail": "src.utils.FileOperator",
        "documentation": {}
    },
    {
        "label": "upload_file",
        "importPath": "src.utils.FileOperator",
        "description": "src.utils.FileOperator",
        "isExtraImport": true,
        "detail": "src.utils.FileOperator",
        "documentation": {}
    },
    {
        "label": "get_file_format",
        "importPath": "src.utils.FileOperator",
        "description": "src.utils.FileOperator",
        "isExtraImport": true,
        "detail": "src.utils.FileOperator",
        "documentation": {}
    },
    {
        "label": "get_file_format",
        "importPath": "src.utils.FileOperator",
        "description": "src.utils.FileOperator",
        "isExtraImport": true,
        "detail": "src.utils.FileOperator",
        "documentation": {}
    },
    {
        "label": "Competition",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "CompetitionCreateModel",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "Sport",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "Competition",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "UserCompetition",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "UserCompetitionCreateModel",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "Sport",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "UserSport",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "UserSport",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "UserCreateModel",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "Competition",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "CompetitionCreateModel",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "CompetitionOut",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "Sport",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "SportCreateModel",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "SportOut",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "UserCompetitionCreateModel",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "UserCreateModel",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "UserSport",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "UserSportORM",
        "importPath": "src.models.models",
        "description": "src.models.models",
        "isExtraImport": true,
        "detail": "src.models.models",
        "documentation": {}
    },
    {
        "label": "session_maker",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "session_maker",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "session_maker",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "session_maker",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "session_maker",
        "importPath": "src.database.database",
        "description": "src.database.database",
        "isExtraImport": true,
        "detail": "src.database.database",
        "documentation": {}
    },
    {
        "label": "Hasher",
        "importPath": "src.utils.hashing",
        "description": "src.utils.hashing",
        "isExtraImport": true,
        "detail": "src.utils.hashing",
        "documentation": {}
    },
    {
        "label": "sign_jwt",
        "importPath": "src.utils.auth_handler",
        "description": "src.utils.auth_handler",
        "isExtraImport": true,
        "detail": "src.utils.auth_handler",
        "documentation": {}
    },
    {
        "label": "sign_jwt",
        "importPath": "src.utils.auth_handler",
        "description": "src.utils.auth_handler",
        "isExtraImport": true,
        "detail": "src.utils.auth_handler",
        "documentation": {}
    },
    {
        "label": "CompetitionRepository",
        "importPath": "src.repository",
        "description": "src.repository",
        "isExtraImport": true,
        "detail": "src.repository",
        "documentation": {}
    },
    {
        "label": "SportsRepository",
        "importPath": "src.repository",
        "description": "src.repository",
        "isExtraImport": true,
        "detail": "src.repository",
        "documentation": {}
    },
    {
        "label": "UsersRepository",
        "importPath": "src.repository",
        "description": "src.repository",
        "isExtraImport": true,
        "detail": "src.repository",
        "documentation": {}
    },
    {
        "label": "createUserCompetition",
        "importPath": "src.repository.UserCompetitionRepository",
        "description": "src.repository.UserCompetitionRepository",
        "isExtraImport": true,
        "detail": "src.repository.UserCompetitionRepository",
        "documentation": {}
    },
    {
        "label": "updateUserCompetition",
        "importPath": "src.repository.UserCompetitionRepository",
        "description": "src.repository.UserCompetitionRepository",
        "isExtraImport": true,
        "detail": "src.repository.UserCompetitionRepository",
        "documentation": {}
    },
    {
        "label": "removeUserCompetition",
        "importPath": "src.repository.UserCompetitionRepository",
        "description": "src.repository.UserCompetitionRepository",
        "isExtraImport": true,
        "detail": "src.repository.UserCompetitionRepository",
        "documentation": {}
    },
    {
        "label": "OAuthError",
        "importPath": "authlib.integrations.starlette_client",
        "description": "authlib.integrations.starlette_client",
        "isExtraImport": true,
        "detail": "authlib.integrations.starlette_client",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "importPath": "src.utils.auth_bearer",
        "description": "src.utils.auth_bearer",
        "isExtraImport": true,
        "detail": "src.utils.auth_bearer",
        "documentation": {}
    },
    {
        "label": "updateUser",
        "importPath": "src.repository.UsersRepository",
        "description": "src.repository.UsersRepository",
        "isExtraImport": true,
        "detail": "src.repository.UsersRepository",
        "documentation": {}
    },
    {
        "label": "addEndDateToUserSport",
        "importPath": "src.repository.UserSportRepository",
        "description": "src.repository.UserSportRepository",
        "isExtraImport": true,
        "detail": "src.repository.UserSportRepository",
        "documentation": {}
    },
    {
        "label": "addSportToUser",
        "importPath": "src.repository.UserSportRepository",
        "description": "src.repository.UserSportRepository",
        "isExtraImport": true,
        "detail": "src.repository.UserSportRepository",
        "documentation": {}
    },
    {
        "label": "removeSportFromUser",
        "importPath": "src.repository.UserSportRepository",
        "description": "src.repository.UserSportRepository",
        "isExtraImport": true,
        "detail": "src.repository.UserSportRepository",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "shortuuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shortuuid",
        "description": "shortuuid",
        "detail": "shortuuid",
        "documentation": {}
    },
    {
        "label": "HTTPBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPAuthorizationCredentials",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "fastapi.staticfiles",
        "description": "fastapi.staticfiles",
        "isExtraImport": true,
        "detail": "fastapi.staticfiles",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "RedirectResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.sports_router",
        "description": "src.routers.sports_router",
        "isExtraImport": true,
        "detail": "src.routers.sports_router",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.user_router",
        "description": "src.routers.user_router",
        "isExtraImport": true,
        "detail": "src.routers.user_router",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.user_sport_router",
        "description": "src.routers.user_sport_router",
        "isExtraImport": true,
        "detail": "src.routers.user_sport_router",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.competition_router",
        "description": "src.routers.competition_router",
        "isExtraImport": true,
        "detail": "src.routers.competition_router",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.user_competition_router",
        "description": "src.routers.user_competition_router",
        "isExtraImport": true,
        "detail": "src.routers.user_competition_router",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "server.api.src.database.database",
        "description": "server.api.src.database.database",
        "peekOfCode": "DATABASE_URL = \"postgresql://\" + os.environ.get(\"DB_USER\") + \":\" + os.environ.get(\"DB_PASSWORD\") + \"@\" + os.environ.get(\"DB_HOST\") + \"/\" + os.environ.get(\"DATABASE\")\nengine = create_engine(DATABASE_URL)\nsession_maker = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
        "detail": "server.api.src.database.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "server.api.src.database.database",
        "description": "server.api.src.database.database",
        "peekOfCode": "engine = create_engine(DATABASE_URL)\nsession_maker = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
        "detail": "server.api.src.database.database",
        "documentation": {}
    },
    {
        "label": "session_maker",
        "kind": 5,
        "importPath": "server.api.src.database.database",
        "description": "server.api.src.database.database",
        "peekOfCode": "session_maker = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
        "detail": "server.api.src.database.database",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "server.api.src.models.models",
        "description": "server.api.src.models.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = 'users'\n    id = Column(BigInteger, primary_key=True, autoincrement=True)\n    name = Column(String(255), nullable=False)\n    email = Column(String(255), nullable=False)\n    password = Column(String(500), nullable=False)\n    date_birthday = Column(Date, nullable=False)\n    sports_category = Column(String(255), nullable=False)\n    avatars = Column(String(255), nullable=True)\n    # Связи",
        "detail": "server.api.src.models.models",
        "documentation": {}
    },
    {
        "label": "Sport",
        "kind": 6,
        "importPath": "server.api.src.models.models",
        "description": "server.api.src.models.models",
        "peekOfCode": "class Sport(Base):\n    __tablename__ = 'sports'\n    id = Column(BigInteger, primary_key=True, autoincrement=True)\n    name = Column(String(255), nullable=False)\n    trainer = Column(String(300), nullable=False)\n    # Связи\n    competitions = relationship('Competition', back_populates='sport')\n    users = relationship('UserSport', back_populates='sport')\nclass UserSport(Base):\n    __tablename__ = 'users_sports'",
        "detail": "server.api.src.models.models",
        "documentation": {}
    },
    {
        "label": "UserSport",
        "kind": 6,
        "importPath": "server.api.src.models.models",
        "description": "server.api.src.models.models",
        "peekOfCode": "class UserSport(Base):\n    __tablename__ = 'users_sports'\n    id = Column(BigInteger, primary_key=True, autoincrement=True)\n    user_id = Column(BigInteger, ForeignKey('users.id'), nullable=False)\n    sport_id = Column(BigInteger, ForeignKey('sports.id'), nullable=False)\n    date_start = Column(Date, nullable=False)\n    date_end = Column(Date, nullable=True)\n    # Связи\n    user = relationship('User', back_populates='sports')\n    sport = relationship('Sport', back_populates='users')",
        "detail": "server.api.src.models.models",
        "documentation": {}
    },
    {
        "label": "Competition",
        "kind": 6,
        "importPath": "server.api.src.models.models",
        "description": "server.api.src.models.models",
        "peekOfCode": "class Competition(Base):\n    __tablename__ = 'competitions'\n    id = Column(BigInteger, primary_key=True, autoincrement=True)\n    sport_id = Column(BigInteger, ForeignKey('sports.id'), nullable=False)\n    name = Column(String(255), nullable=False)\n    description = Column(Text, nullable=True)\n    chief_judge = Column(String(255), nullable=False)\n    date = Column(Date, nullable=False)\n    image = Column(String(255), nullable=True)\n    # Связи",
        "detail": "server.api.src.models.models",
        "documentation": {}
    },
    {
        "label": "UserCompetition",
        "kind": 6,
        "importPath": "server.api.src.models.models",
        "description": "server.api.src.models.models",
        "peekOfCode": "class UserCompetition(Base):\n    __tablename__ = 'users_competitions'\n    id = Column(BigInteger, primary_key=True, autoincrement=True)\n    user_id = Column(BigInteger, ForeignKey('users.id'), nullable=False)\n    competition_id = Column(BigInteger, ForeignKey('competitions.id'), nullable=False)\n    start_group = Column(String(255), nullable=False)\n    description = Column(String(255), nullable=False)\n    results = Column(String(255), nullable=False)\n    position = Column(Integer, nullable=False)\n    # Связи",
        "detail": "server.api.src.models.models",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "server.api.src.models.models",
        "description": "server.api.src.models.models",
        "peekOfCode": "class UserLogin(BaseModel):\n    email: str\n    password: str\n# model for pagination\nclass UserOut(BaseModel):\n    id: int\n    name: str\n    email: str\n    date_birthday: Optional[datetime.date] = None\n    sports_category: Optional[str] = None",
        "detail": "server.api.src.models.models",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "kind": 6,
        "importPath": "server.api.src.models.models",
        "description": "server.api.src.models.models",
        "peekOfCode": "class UserOut(BaseModel):\n    id: int\n    name: str\n    email: str\n    date_birthday: Optional[datetime.date] = None\n    sports_category: Optional[str] = None\n    avatars: Optional[str] = None\n    # for work pydantic with sqlalchemy model\n    class Config:\n        orm_mode = True",
        "detail": "server.api.src.models.models",
        "documentation": {}
    },
    {
        "label": "UserCreateModel",
        "kind": 6,
        "importPath": "server.api.src.models.models",
        "description": "server.api.src.models.models",
        "peekOfCode": "class UserCreateModel(BaseModel):  \n    name: str\n    email: str\n    password: str\n    date_birthday: datetime.date\n    sports_category: str\nclass SportOut(BaseModel):\n    id: int\n    name: str\n    trainer: str",
        "detail": "server.api.src.models.models",
        "documentation": {}
    },
    {
        "label": "SportOut",
        "kind": 6,
        "importPath": "server.api.src.models.models",
        "description": "server.api.src.models.models",
        "peekOfCode": "class SportOut(BaseModel):\n    id: int\n    name: str\n    trainer: str\n    class Config:\n        orm_mode = True\nclass SportCreateModel(BaseModel):\n    name: str\n    trainer: str\nclass UserSportORM(BaseModel):",
        "detail": "server.api.src.models.models",
        "documentation": {}
    },
    {
        "label": "SportCreateModel",
        "kind": 6,
        "importPath": "server.api.src.models.models",
        "description": "server.api.src.models.models",
        "peekOfCode": "class SportCreateModel(BaseModel):\n    name: str\n    trainer: str\nclass UserSportORM(BaseModel):\n    user_id: int\n    sport_id: int\n    date_start: datetime.date\n    date_end: Optional[datetime.date] = None\nclass CompetitionCreateModel(BaseModel):\n    sport_id: int",
        "detail": "server.api.src.models.models",
        "documentation": {}
    },
    {
        "label": "UserSportORM",
        "kind": 6,
        "importPath": "server.api.src.models.models",
        "description": "server.api.src.models.models",
        "peekOfCode": "class UserSportORM(BaseModel):\n    user_id: int\n    sport_id: int\n    date_start: datetime.date\n    date_end: Optional[datetime.date] = None\nclass CompetitionCreateModel(BaseModel):\n    sport_id: int\n    name: str\n    description: str\n    chief_judge: str",
        "detail": "server.api.src.models.models",
        "documentation": {}
    },
    {
        "label": "CompetitionCreateModel",
        "kind": 6,
        "importPath": "server.api.src.models.models",
        "description": "server.api.src.models.models",
        "peekOfCode": "class CompetitionCreateModel(BaseModel):\n    sport_id: int\n    name: str\n    description: str\n    chief_judge: str\n    date: datetime.date\nclass CompetitionOut(BaseModel):\n    id: int\n    sport_id: int\n    name: str",
        "detail": "server.api.src.models.models",
        "documentation": {}
    },
    {
        "label": "CompetitionOut",
        "kind": 6,
        "importPath": "server.api.src.models.models",
        "description": "server.api.src.models.models",
        "peekOfCode": "class CompetitionOut(BaseModel):\n    id: int\n    sport_id: int\n    name: str\n    description: Optional[str] = None\n    chief_judge: str\n    date: datetime.date\n    image: Optional[str] = None\n    class Config:\n        orm_mode = True",
        "detail": "server.api.src.models.models",
        "documentation": {}
    },
    {
        "label": "UserCompetitionCreateModel",
        "kind": 6,
        "importPath": "server.api.src.models.models",
        "description": "server.api.src.models.models",
        "peekOfCode": "class UserCompetitionCreateModel(BaseModel):\n    user_id: int\n    competition_id: int\n    start_group: str\n    description: str\n    results: str\n    position: int",
        "detail": "server.api.src.models.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "server.api.src.models.models",
        "description": "server.api.src.models.models",
        "peekOfCode": "Base = declarative_base()\n# class Sport(Base):\n#     __tablename__ = \"sports\"\n#     id = Column(Integer, primary_key=True, index=True)\n#     name = Column(String)\n#     trainer = Column(String)\n# class User(Base):\n#     __tablename__ = \"users\"\n#     id = Column(Integer, primary_key=True, index=True)\n#     name = Column(String)",
        "detail": "server.api.src.models.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "server.api.src.models.models",
        "description": "server.api.src.models.models",
        "peekOfCode": "Base = declarative_base()\nclass User(Base):\n    __tablename__ = 'users'\n    id = Column(BigInteger, primary_key=True, autoincrement=True)\n    name = Column(String(255), nullable=False)\n    email = Column(String(255), nullable=False)\n    password = Column(String(500), nullable=False)\n    date_birthday = Column(Date, nullable=False)\n    sports_category = Column(String(255), nullable=False)\n    avatars = Column(String(255), nullable=True)",
        "detail": "server.api.src.models.models",
        "documentation": {}
    },
    {
        "label": "getAllCompetition",
        "kind": 2,
        "importPath": "server.api.src.repository.CompetitionRepository",
        "description": "server.api.src.repository.CompetitionRepository",
        "peekOfCode": "def getAllCompetition() -> Page[Competition]:\n    with session_maker() as db:\n        query = db.query(Competition)\n        return paginate(query)\ndef getCompetitionById(id: int):\n    with session_maker() as db:\n        competition = (\n            db.query(Competition)\n            .options(\n                joinedload(Competition.sport),",
        "detail": "server.api.src.repository.CompetitionRepository",
        "documentation": {}
    },
    {
        "label": "getCompetitionById",
        "kind": 2,
        "importPath": "server.api.src.repository.CompetitionRepository",
        "description": "server.api.src.repository.CompetitionRepository",
        "peekOfCode": "def getCompetitionById(id: int):\n    with session_maker() as db:\n        competition = (\n            db.query(Competition)\n            .options(\n                joinedload(Competition.sport),\n                joinedload(Competition.participants)\n            )\n            .get(id))\n        if competition:",
        "detail": "server.api.src.repository.CompetitionRepository",
        "documentation": {}
    },
    {
        "label": "createCompetition",
        "kind": 2,
        "importPath": "server.api.src.repository.CompetitionRepository",
        "description": "server.api.src.repository.CompetitionRepository",
        "peekOfCode": "def createCompetition(competition: CompetitionCreateModel, image: UploadFile):\n    current_file_name = upload_file('competitions/images', image, image.filename)\n    db_competition = Competition(**competition.model_dump())\n    db_competition.image = current_file_name\n    with session_maker() as db:\n        db.add(db_competition)\n        db.commit()\n        return db_competition\ndef updateCompetition(id: int, competition: Competition, image: UploadFile):\n    with session_maker() as db:",
        "detail": "server.api.src.repository.CompetitionRepository",
        "documentation": {}
    },
    {
        "label": "updateCompetition",
        "kind": 2,
        "importPath": "server.api.src.repository.CompetitionRepository",
        "description": "server.api.src.repository.CompetitionRepository",
        "peekOfCode": "def updateCompetition(id: int, competition: Competition, image: UploadFile):\n    with session_maker() as db:\n        competition_db = db.query(Competition).get(id)\n        if not competition_db:\n            raise HTTPException(status_code=404, detail=\"Competition not found\")\n        competition_db.name = competition.name\n        competition_db.description = competition.description\n        competition_db.chief_judge = competition.chief_judge\n        competition_db.date = competition.date\n        current_file_name = upload_file('competitions/images', image, image.filename)",
        "detail": "server.api.src.repository.CompetitionRepository",
        "documentation": {}
    },
    {
        "label": "deleteCompetitionById",
        "kind": 2,
        "importPath": "server.api.src.repository.CompetitionRepository",
        "description": "server.api.src.repository.CompetitionRepository",
        "peekOfCode": "def deleteCompetitionById(id: int):\n    with session_maker() as db:\n        competition = db.query(Competition).get(id)\n        db.delete(competition)\n        db.commit()\n        return True",
        "detail": "server.api.src.repository.CompetitionRepository",
        "documentation": {}
    },
    {
        "label": "getAllSports",
        "kind": 2,
        "importPath": "server.api.src.repository.SportsRepository",
        "description": "server.api.src.repository.SportsRepository",
        "peekOfCode": "def getAllSports() -> Page[Sport]:\n    with session_maker() as db:\n        query = db.query(Sport)\n        return paginate(query)\ndef getSportById(id: int):\n    with session_maker() as db:\n        sport = (\n            db\n            .query(Sport)\n            .options(",
        "detail": "server.api.src.repository.SportsRepository",
        "documentation": {}
    },
    {
        "label": "getSportById",
        "kind": 2,
        "importPath": "server.api.src.repository.SportsRepository",
        "description": "server.api.src.repository.SportsRepository",
        "peekOfCode": "def getSportById(id: int):\n    with session_maker() as db:\n        sport = (\n            db\n            .query(Sport)\n            .options(\n                joinedload(Sport.users),\n                joinedload(Sport.competitions)\n            )\n            .get(id) ",
        "detail": "server.api.src.repository.SportsRepository",
        "documentation": {}
    },
    {
        "label": "createSport",
        "kind": 2,
        "importPath": "server.api.src.repository.SportsRepository",
        "description": "server.api.src.repository.SportsRepository",
        "peekOfCode": "def createSport(sport: Sport):\n    with session_maker() as db:\n        db.add(sport)\n        db.commit()\n        return sport\ndef updateSport(id: int, sport: Sport):\n    with session_maker() as db:\n        sport_db = db.query(Sport).get(id)\n        sport_db.name = sport.name\n        sport_db.trainer = sport.trainer",
        "detail": "server.api.src.repository.SportsRepository",
        "documentation": {}
    },
    {
        "label": "updateSport",
        "kind": 2,
        "importPath": "server.api.src.repository.SportsRepository",
        "description": "server.api.src.repository.SportsRepository",
        "peekOfCode": "def updateSport(id: int, sport: Sport):\n    with session_maker() as db:\n        sport_db = db.query(Sport).get(id)\n        sport_db.name = sport.name\n        sport_db.trainer = sport.trainer\n        db.commit()\n        sport.id = id\n        return sport\ndef deleteSportById(id: int):\n    with session_maker() as db:",
        "detail": "server.api.src.repository.SportsRepository",
        "documentation": {}
    },
    {
        "label": "deleteSportById",
        "kind": 2,
        "importPath": "server.api.src.repository.SportsRepository",
        "description": "server.api.src.repository.SportsRepository",
        "peekOfCode": "def deleteSportById(id: int):\n    with session_maker() as db:\n        sport = db.query(Sport).get(id)\n        db.delete(sport)\n        db.commit()\n        return True",
        "detail": "server.api.src.repository.SportsRepository",
        "documentation": {}
    },
    {
        "label": "createUserCompetition",
        "kind": 2,
        "importPath": "server.api.src.repository.UserCompetitionRepository",
        "description": "server.api.src.repository.UserCompetitionRepository",
        "peekOfCode": "def createUserCompetition(data: UserCompetitionCreateModel):\n    with session_maker() as db:\n        user = db.query(User).filter(User.id == data.user_id).first()\n        if not user:\n            raise ValueError(f\"User with id {data.user_id} does not exist.\")\n        competition = db.query(Competition).filter(Competition.id == data.competition_id).first()\n        if not competition:\n            raise ValueError(f\"Competition with id {data.sport_id} does not exist.\")\n        db_user_competition = UserCompetition(**data.model_dump())\n        db.add(db_user_competition)",
        "detail": "server.api.src.repository.UserCompetitionRepository",
        "documentation": {}
    },
    {
        "label": "updateUserCompetition",
        "kind": 2,
        "importPath": "server.api.src.repository.UserCompetitionRepository",
        "description": "server.api.src.repository.UserCompetitionRepository",
        "peekOfCode": "def updateUserCompetition(id: int, data: UserCompetitionCreateModel):\n    with session_maker() as db:\n        user_competition = db.query(UserCompetition).filter(UserCompetition.id == id).first()\n        if not user_competition:\n            raise ValueError(f\"Row with id {id} not found.\")\n        user_competition.user_id = data.user_id\n        user_competition.competition_id = data.competition_id\n        user_competition.start_group = data.start_group\n        user_competition.description = data.description\n        user_competition.results = data.results",
        "detail": "server.api.src.repository.UserCompetitionRepository",
        "documentation": {}
    },
    {
        "label": "removeUserCompetition",
        "kind": 2,
        "importPath": "server.api.src.repository.UserCompetitionRepository",
        "description": "server.api.src.repository.UserCompetitionRepository",
        "peekOfCode": "def removeUserCompetition(id: int):\n    with session_maker() as db:\n        user_competition = db.query(UserCompetition).filter(UserCompetition.id == id).first()\n        if not user_competition:\n            raise ValueError(f\"User competition with id {id} not found.\")\n        db.delete(user_competition)\n        db.commit()\n        return {\"message\": \"User competition deleted success\"}",
        "detail": "server.api.src.repository.UserCompetitionRepository",
        "documentation": {}
    },
    {
        "label": "addSportToUser",
        "kind": 2,
        "importPath": "server.api.src.repository.UserSportRepository",
        "description": "server.api.src.repository.UserSportRepository",
        "peekOfCode": "def addSportToUser(data: UserSport):\n    with session_maker() as db:\n        user = db.query(User).filter(User.id == data.user_id).first()\n        if not user:\n            raise ValueError(f\"User with id {data.user_id} does not exist.\")\n        sport = db.query(Sport).filter(Sport.id == data.sport_id).first()\n        if not sport:\n            raise ValueError(f\"Sport with id {data.sport_id} does not exist.\")\n        # if all right\n        db.add(data)",
        "detail": "server.api.src.repository.UserSportRepository",
        "documentation": {}
    },
    {
        "label": "addEndDateToUserSport",
        "kind": 2,
        "importPath": "server.api.src.repository.UserSportRepository",
        "description": "server.api.src.repository.UserSportRepository",
        "peekOfCode": "def addEndDateToUserSport(user_sport_id: int, date_end: datetime.date):\n    with session_maker() as db:\n        user_sport = db.query(UserSport).filter(UserSport.id == user_sport_id).first()\n        if not user_sport:\n            raise ValueError(f\"Row with id {user_sport_id} not found.\")\n        user_sport.date_end = date_end\n        db.commit()\n        return True\ndef removeSportFromUser(id: int):\n    with session_maker() as db:",
        "detail": "server.api.src.repository.UserSportRepository",
        "documentation": {}
    },
    {
        "label": "removeSportFromUser",
        "kind": 2,
        "importPath": "server.api.src.repository.UserSportRepository",
        "description": "server.api.src.repository.UserSportRepository",
        "peekOfCode": "def removeSportFromUser(id: int):\n    with session_maker() as db:\n        user_sport = db.query(UserSport).filter(UserSport.id == id).first()\n        if not user_sport:\n            raise ValueError(f\"Row with id {id} not found.\")\n        db.delete(user_sport)\n        db.commit()\n        return True",
        "detail": "server.api.src.repository.UserSportRepository",
        "documentation": {}
    },
    {
        "label": "getAllUsers",
        "kind": 2,
        "importPath": "server.api.src.repository.UsersRepository",
        "description": "server.api.src.repository.UsersRepository",
        "peekOfCode": "def getAllUsers() -> Page[User]:\n    with session_maker() as db:\n        query = db.query(User)\n        return paginate(query)\ndef checkUser(user: UserLogin):\n    with session_maker() as db:\n        user_db = db.query(User).filter(User.email == user.email).first()\n        if not user_db:\n            return False\n        is_user = Hasher.verify_password(user.password, user_db.password)",
        "detail": "server.api.src.repository.UsersRepository",
        "documentation": {}
    },
    {
        "label": "checkUser",
        "kind": 2,
        "importPath": "server.api.src.repository.UsersRepository",
        "description": "server.api.src.repository.UsersRepository",
        "peekOfCode": "def checkUser(user: UserLogin):\n    with session_maker() as db:\n        user_db = db.query(User).filter(User.email == user.email).first()\n        if not user_db:\n            return False\n        is_user = Hasher.verify_password(user.password, user_db.password)\n        if is_user:\n            return user\n        return False\ndef getUserById(id: int):",
        "detail": "server.api.src.repository.UsersRepository",
        "documentation": {}
    },
    {
        "label": "getUserById",
        "kind": 2,
        "importPath": "server.api.src.repository.UsersRepository",
        "description": "server.api.src.repository.UsersRepository",
        "peekOfCode": "def getUserById(id: int):\n    with session_maker() as db:\n        user = (\n            db.query(User)\n            .options(\n                joinedload(User.sports),  # Жадная загрузка видов спорта\n                joinedload(User.competitions),  # Жадная загрузка соревнований\n            )\n            .filter(User.id == id)\n            .first()",
        "detail": "server.api.src.repository.UsersRepository",
        "documentation": {}
    },
    {
        "label": "createUser",
        "kind": 2,
        "importPath": "server.api.src.repository.UsersRepository",
        "description": "server.api.src.repository.UsersRepository",
        "peekOfCode": "def createUser(user: UserCreateModel, avatar: UploadFile | None):\n    if avatar:\n        current_file_name = upload_file('users/avatars', avatar, avatar.filename)\n    else:\n        current_file_name = os.environ.get(\"DEFAULT_AVATARS\")\n    user_dict = {\n        'name': user.name,\n        'email': user.email,\n        'password': Hasher.get_password_hash(user.password),\n        'date_birthday': user.date_birthday,",
        "detail": "server.api.src.repository.UsersRepository",
        "documentation": {}
    },
    {
        "label": "updateUser",
        "kind": 2,
        "importPath": "server.api.src.repository.UsersRepository",
        "description": "server.api.src.repository.UsersRepository",
        "peekOfCode": "def updateUser(id: int, user: UserCreateModel, avatar: UploadFile | None):\n    with session_maker() as db:\n        user_db = db.query(User).get(id)\n        user_db.name = user.name\n        user_db.email = user.email\n        user_db.password = Hasher.get_password_hash(user.password)\n        user_db.date_birthday = user.date_birthday\n        user_db.sports_category = user.sports_category\n        current_file_name = upload_file('users/avatars', avatar, avatar.filename)\n        user_db.avatars = current_file_name",
        "detail": "server.api.src.repository.UsersRepository",
        "documentation": {}
    },
    {
        "label": "deleteUserById",
        "kind": 2,
        "importPath": "server.api.src.repository.UsersRepository",
        "description": "server.api.src.repository.UsersRepository",
        "peekOfCode": "def deleteUserById(id: int):\n    with session_maker() as db:\n        user = db.query(User).get(id)\n        db.delete(user)\n        db.commit()\n        return True",
        "detail": "server.api.src.repository.UsersRepository",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.api.src.routers.competition_router",
        "description": "server.api.src.routers.competition_router",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/competitions\",\n    tags=[\"Competitions CRUD\"],\n)\n@router.get(\"/\", response_model=Page[CompetitionOut])\nasync def get_competitions():\n    page = CompetitionRepository.getAllCompetition()\n    return page\n@router.get(\"/{id}\")\nasync def get_competition(id: int):",
        "detail": "server.api.src.routers.competition_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.api.src.routers.sports_router",
        "description": "server.api.src.routers.sports_router",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/sports\",\n    tags=[\"Sports CRUD\"],\n)\n@router.get(\"/\", response_model=Page[SportOut])\nasync def get_sports():\n    page = SportsRepository.getAllSports()\n    return page\n@router.get(\"/{id}\")\nasync def get_sport_by_id(id: int):",
        "detail": "server.api.src.routers.sports_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.api.src.routers.user_competition_router",
        "description": "server.api.src.routers.user_competition_router",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/user_competition\",\n    tags=[\"User Competition CRUD\"],\n)\n@router.post(\"/\")\nasync def create_user_competition(user_id: Annotated[int, Form()],\n                                    competition_id: Annotated[int, Form()],\n                                    start_group: Annotated[str, Form()],\n                                    description: Annotated[str, Form()],\n                                    results: Annotated[str, Form()],",
        "detail": "server.api.src.routers.user_competition_router",
        "documentation": {}
    },
    {
        "label": "update_user",
        "kind": 2,
        "importPath": "server.api.src.routers.user_router",
        "description": "server.api.src.routers.user_router",
        "peekOfCode": "def update_user(id: int, \n                name: Annotated[str, Form()],\n                email: Annotated[str, Form()],\n                password: Annotated[str, Form()],\n                date_birthday: Annotated[datetime.date, Form()],\n                sports_category: Annotated[str, Form()],\n                avatar: Optional[UploadFile] = File(None),\n            ):\n    if avatar:\n        file_format = get_file_format(avatar)",
        "detail": "server.api.src.routers.user_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.api.src.routers.user_router",
        "description": "server.api.src.routers.user_router",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/users\",\n    tags=[\"Users CRUD\"],\n)\n@router.get(\"/\", response_model=Page[UserOut])\nasync def get_users():\n    page = UsersRepository.getAllUsers()\n    return page\n@router.get(\"/{id}\", dependencies=[Depends(JWTBearer())])\nasync def get_user_by_id(id: int):",
        "detail": "server.api.src.routers.user_router",
        "documentation": {}
    },
    {
        "label": "update_end_date_of_user_sport",
        "kind": 2,
        "importPath": "server.api.src.routers.user_sport_router",
        "description": "server.api.src.routers.user_sport_router",
        "peekOfCode": "def update_end_date_of_user_sport(user_sport_id: Annotated[int, Form()],\n                                  date_end: Annotated[datetime.date, Form()]):\n    result = addEndDateToUserSport(user_sport_id, date_end)\n    if not result:\n        raise HTTPException(status_code=404, detail=\"User Sport not found\")\n    return {\"message\" : \"User Sport update success\"}\n@router.delete(\"/{id}\")\nasync def delete_user_sport(user_sport_id: Annotated[int, Form()]):\n    result = removeSportFromUser(user_sport_id)\n    if not result:",
        "detail": "server.api.src.routers.user_sport_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.api.src.routers.user_sport_router",
        "description": "server.api.src.routers.user_sport_router",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/api/user_sport\",\n    tags=[\"User Sport CRUD\"],\n)\n@router.post(\"/create\")\nasync def create_user_sport(\n    user_id: Annotated[int, Form()],\n    sport_id: Annotated[int, Form()],\n    date_start: Annotated[datetime.date, Form()],\n    date_end: Annotated[datetime.date, Form()] = None",
        "detail": "server.api.src.routers.user_sport_router",
        "documentation": {}
    },
    {
        "label": "get_unique_short_uuid4",
        "kind": 2,
        "importPath": "server.api.src.utils.FileOperator",
        "description": "server.api.src.utils.FileOperator",
        "peekOfCode": "def get_unique_short_uuid4() -> str:\n    return shortuuid.uuid()\ndef upload_file(path: str, file: UploadFile, filename: str) -> str | None:\n    if not file or not filename:\n        return None\n    path_model, path_field = path.split('/')\n    if path_model not in os.listdir(\"public\"):\n        os.mkdir(f\"public/{path_model}\")\n        os.mkdir(f\"public/{path_model}/{path_field}\")\n    unique_name = str(get_unique_short_uuid4())",
        "detail": "server.api.src.utils.FileOperator",
        "documentation": {}
    },
    {
        "label": "upload_file",
        "kind": 2,
        "importPath": "server.api.src.utils.FileOperator",
        "description": "server.api.src.utils.FileOperator",
        "peekOfCode": "def upload_file(path: str, file: UploadFile, filename: str) -> str | None:\n    if not file or not filename:\n        return None\n    path_model, path_field = path.split('/')\n    if path_model not in os.listdir(\"public\"):\n        os.mkdir(f\"public/{path_model}\")\n        os.mkdir(f\"public/{path_model}/{path_field}\")\n    unique_name = str(get_unique_short_uuid4())\n    os.mkdir(f\"public/{path}/{unique_name}\")\n    location = f\"public/{path}/{unique_name}/{filename}\"",
        "detail": "server.api.src.utils.FileOperator",
        "documentation": {}
    },
    {
        "label": "delete_file",
        "kind": 2,
        "importPath": "server.api.src.utils.FileOperator",
        "description": "server.api.src.utils.FileOperator",
        "peekOfCode": "def delete_file(path: str):\n    if path:\n        directory = '/'.join(path.split('/')[:-1])\n        os.remove(path)\n        if not os.listdir(directory):\n            os.rmdir(directory)\ndef get_file_format(file: UploadFile) -> str:\n    return file.filename.split('.')[-1]",
        "detail": "server.api.src.utils.FileOperator",
        "documentation": {}
    },
    {
        "label": "get_file_format",
        "kind": 2,
        "importPath": "server.api.src.utils.FileOperator",
        "description": "server.api.src.utils.FileOperator",
        "peekOfCode": "def get_file_format(file: UploadFile) -> str:\n    return file.filename.split('.')[-1]",
        "detail": "server.api.src.utils.FileOperator",
        "documentation": {}
    },
    {
        "label": "JWTBearer",
        "kind": 6,
        "importPath": "server.api.src.utils.auth_bearer",
        "description": "server.api.src.utils.auth_bearer",
        "peekOfCode": "class JWTBearer(HTTPBearer):\n    # auto_error: bool = True - automatic message about error\n    def __init__(self, auto_error: bool = True):\n        super(JWTBearer, self).__init__(auto_error=auto_error)\n    async def __call__(self, request: Request):\n        credentials: HTTPAuthorizationCredentials = await super(JWTBearer, self).__call__(request)\n        if credentials:\n            if not credentials.scheme == \"Bearer\":\n                raise HTTPException(status_code=403, detail=\"Invalid authentication scheme.\")\n            if not self.verify_jwt(credentials.credentials):",
        "detail": "server.api.src.utils.auth_bearer",
        "documentation": {}
    },
    {
        "label": "token_response",
        "kind": 2,
        "importPath": "server.api.src.utils.auth_handler",
        "description": "server.api.src.utils.auth_handler",
        "peekOfCode": "def token_response(token: str):\n    return {\n        \"access_token\": token\n    }\n# генерация токена со сроком действия 60 минут\ndef sign_jwt(user_id: str) -> Dict[str, str]:\n    payload = {\n        \"user_id\": user_id,\n        \"expires\": time.time() + 3600\n    }",
        "detail": "server.api.src.utils.auth_handler",
        "documentation": {}
    },
    {
        "label": "sign_jwt",
        "kind": 2,
        "importPath": "server.api.src.utils.auth_handler",
        "description": "server.api.src.utils.auth_handler",
        "peekOfCode": "def sign_jwt(user_id: str) -> Dict[str, str]:\n    payload = {\n        \"user_id\": user_id,\n        \"expires\": time.time() + 3600\n    }\n    token = jwt.encode(payload, JWT_SECRET, algorithm=JWT_ALGORITHM)\n    return token_response(token)\n# проверка токена на время действия - вернёт None, если вышло\ndef decode_jwt(token: str) -> dict:\n    try:",
        "detail": "server.api.src.utils.auth_handler",
        "documentation": {}
    },
    {
        "label": "decode_jwt",
        "kind": 2,
        "importPath": "server.api.src.utils.auth_handler",
        "description": "server.api.src.utils.auth_handler",
        "peekOfCode": "def decode_jwt(token: str) -> dict:\n    try:\n        decoded_token = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])\n        return decoded_token if decoded_token[\"expires\"] >= time.time() else None\n    except:\n        return {}",
        "detail": "server.api.src.utils.auth_handler",
        "documentation": {}
    },
    {
        "label": "JWT_SECRET",
        "kind": 5,
        "importPath": "server.api.src.utils.auth_handler",
        "description": "server.api.src.utils.auth_handler",
        "peekOfCode": "JWT_SECRET = \"please_please_update_me_please\"\nJWT_ALGORITHM = \"HS256\"\n# возврат сгенерированных токенов\ndef token_response(token: str):\n    return {\n        \"access_token\": token\n    }\n# генерация токена со сроком действия 60 минут\ndef sign_jwt(user_id: str) -> Dict[str, str]:\n    payload = {",
        "detail": "server.api.src.utils.auth_handler",
        "documentation": {}
    },
    {
        "label": "JWT_ALGORITHM",
        "kind": 5,
        "importPath": "server.api.src.utils.auth_handler",
        "description": "server.api.src.utils.auth_handler",
        "peekOfCode": "JWT_ALGORITHM = \"HS256\"\n# возврат сгенерированных токенов\ndef token_response(token: str):\n    return {\n        \"access_token\": token\n    }\n# генерация токена со сроком действия 60 минут\ndef sign_jwt(user_id: str) -> Dict[str, str]:\n    payload = {\n        \"user_id\": user_id,",
        "detail": "server.api.src.utils.auth_handler",
        "documentation": {}
    },
    {
        "label": "Hasher",
        "kind": 6,
        "importPath": "server.api.src.utils.hashing",
        "description": "server.api.src.utils.hashing",
        "peekOfCode": "class Hasher():\n    @staticmethod\n    def verify_password(plain_password, hashed_password):\n        return pwd_context.verify(plain_password, hashed_password)\n    @staticmethod\n    def get_password_hash(password):\n        return pwd_context.hash(password)",
        "detail": "server.api.src.utils.hashing",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "server.api.src.utils.hashing",
        "description": "server.api.src.utils.hashing",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nclass Hasher():\n    @staticmethod\n    def verify_password(plain_password, hashed_password):\n        return pwd_context.verify(plain_password, hashed_password)\n    @staticmethod\n    def get_password_hash(password):\n        return pwd_context.hash(password)",
        "detail": "server.api.src.utils.hashing",
        "documentation": {}
    },
    {
        "label": "redirect_to_swagger",
        "kind": 2,
        "importPath": "server.api.main",
        "description": "server.api.main",
        "peekOfCode": "def redirect_to_swagger():\n    return RedirectResponse(url=\"/docs\")\napp.include_router(sports_router)\napp.include_router(user_router)\napp.include_router(user_sport_router)\napp.include_router(competition_router)\napp.include_router(user_competition_router)\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\"main:app\", host=\"localhost\", port=8000, reload=True)",
        "detail": "server.api.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "server.api.main",
        "description": "server.api.main",
        "peekOfCode": "app = FastAPI(\n    title=\"Учёт результатов спортивных соревнований\", \n    description=\"Данная API предназначена для курсовой работы в рамках предмета ТПО\", \n    version=\"1.0.1\"\n)\nadd_pagination(app)\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,",
        "detail": "server.api.main",
        "documentation": {}
    }
]